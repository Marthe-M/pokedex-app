import Head from 'next/head'
import { gql } from "@apollo/client";
import client from "../apollo/client";
import Pokemon from '../components/Pokemon'
import { useState, useEffect } from 'react'
import { CgPokemon } from 'react-icons/cg'
import Image from 'next/image'

const Home: React.FC<PokemonProps> = ({ pokemon }: PokemonProps) => {
  const [searchTerm, setSearchTerm] = useState<string>("")
  const [data, setData] = useState<PokemonType[]>([])
  const [showCollection, setShowCollection] = useState<Boolean>(false)
  const [newData, setNewData] = useState<NewPokemonType[]>([])
  const [selectTerm, setSelectTerm] = useState<string>("all")

  const handleChange: React.ChangeEventHandler<HTMLInputElement> = (e) => {
    setSearchTerm(e.target.value);
  }

  const handleSelectChange: React.ChangeEventHandler<HTMLSelectElement> = (e) => {
    setSelectTerm(e.target.value)
  }

  const searchResults = (searchTerm: string) => {
    const slicedData = pokemon.slice(0, 150)
    const searchData = slicedData.filter(item => item.name.toLowerCase().includes(searchTerm.toLowerCase()))
    setData(searchData)
  }

  const selectResults = (event: React.FormEvent<HTMLFormElement>) => {
    event.preventDefault()
    const slicedData = pokemon.slice(0, 150)
    if (selectTerm === "all") {
      setData(slicedData)
    } else if (selectTerm !== 'all') {
      const searchResults = slicedData.filter(item => (item.types[0].name.toLowerCase().includes(selectTerm)) || (item.types[1] !== undefined && item.types[1].name.toLowerCase().includes(selectTerm)))
      setData(searchResults)
    }
  }

  const resetSearch = () => {
    setShowCollection(false)
    setSearchTerm("")
  }

  const showMyCollection = () => {
    setShowCollection(true)
    getPokemon()
  }

  async function getPokemon() {
    try {
      fetch('https://pokedex-app-nu.vercel.app/api/collection', {

        method: 'GET'
      }).then(response => response.json())
        .then(output => setNewData(output))

    } catch (error) {
      console.log(error)
    }
  }

  async function deletePokemon(id: string) {
    try {
      fetch(`https://pokedex-app-nu.vercel.app/api/delete/${id}`, {
        headers: {
          'Content-type': 'application/json'
        },
        method: 'DELETE'
      }).then(() => {
        getPokemon()
      })
    } catch (error) {
      console.log(error)
    }
  }

  const removePokemon = (id: string) => {
    deletePokemon(id)
  }

  useEffect(() => {
    if (searchTerm.length === 0) {
      const slicedData = pokemon.slice(0, 150)
      setData(slicedData)
    }
    else if (searchTerm.length > 0) {
      searchResults(searchTerm)
    }
    // eslint-disable-next-line react-hooks/exhaustive-deps
  }, [searchTerm])

  const iconStyle = {
    fontSize: '50px'
  }


  return (
    <div className="app-container">
      <Head>
        <title>Pokedex App</title>
        <meta name="description" content="Generated by create next app" />
        <link rel="icon" href="/favicon.ico" />
      </Head>

      <h1 className="app-title"> <CgPokemon style={iconStyle} /> Pokedex App  <CgPokemon style={iconStyle} /></h1>

      <div className="header-container">
        <div className="header-buttons">
          <button type="button" onClick={showMyCollection}>Show my collection</button>
          <button type="reset" onClick={resetSearch}>Show all</button>
        </div>
        {showCollection ? <div></div> :

          <div className="header-form">
            <input
              type="text"
              placeholder="Search By Name..."
              value={searchTerm}
              onChange={handleChange}
            />
            <form onSubmit={(e) => selectResults(e)} >

              <select onChange={(e) => handleSelectChange(e)}>
                <option value="all" defaultChecked >All Types</option>
                <option value="normal">Normal</option>
                <option value="fire">Fire</option>
                <option value="water">Water</option>
                <option value="grass">Grass</option>
                <option value="flying">Flying</option>
                <option value="fighting">Fighting</option>
                <option value="poison">Poison</option>
                <option value="electric">Electric</option>
                <option value="ground">Ground</option>
                <option value="rock">Rock</option>
                <option value="psychic">Psychic</option>
                <option value="ice">Ice</option>
                <option value="bug">Bug</option>
                <option value="ghost">Ghost</option>
                <option value="steel">Steel</option>
                <option value="dragon">Dragon</option>
                <option value="dark">Dark</option>
                <option value="fairy">Fairy</option>
              </select>
              <button type="submit">Search By Type</button>
            </form></div>}
      </div>

      {showCollection ?
        <ul className="collected-pokemon"> {newData && newData.map(pokemon => (<li key={pokemon.uniqueId}>
          <h3>{pokemon.name[0].toUpperCase() + pokemon.name.slice(1)} #{pokemon.id}</h3>
          <div><Image width="120px" height="120px" layout="fixed" src={pokemon.image} alt={pokemon.name} /></div>
          <button onClick={() => removePokemon(pokemon.uniqueId)}>Remove</button></li>
        ))} </ul> :

        <main className="content-container">

          {data.map((pokemon) => (
            <Pokemon
              key={pokemon.id}
              id={pokemon.id}
              name={pokemon.name}
              sprites={pokemon.sprites}
              types={pokemon.types}
              evolves_from={pokemon.evolves_from}
              evolves_to={pokemon.evolves_to}
              base_stats={pokemon.base_stats}
              abilities={pokemon.abilities}
              height={pokemon.height}
              weight={pokemon.weight}
            />

          ))}
        </main >}

    </div>

  )
}

export default Home

export async function getStaticProps() {
  const { data } = await client.query({
    query: gql`
{
  allPokemon {
    id
    name
     height
    weight
    sprites {
      front_default
    }
     types {
      name
    }
    evolves_from {
        name
      }
      evolves_to {
        name
      }
      base_stats {
      hp
      attack
      defense
      speed
    }
    abilities {
      name
    }
  }
}
    `,
  });

  return {
    props: {
      pokemon: data.allPokemon
    },
  };
}
